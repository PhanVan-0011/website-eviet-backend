<?php

namespace Database\Seeders;

use App\Models\PurchaseInvoice;
use App\Models\PurchaseInvoiceDetail;
use App\Models\Supplier;
use App\Models\Branch;
use App\Models\User;
use App\Models\Product;
use App\Models\BranchProductStock;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class SupplierPurchaseHistorySeeder extends Seeder
{
    /**
     * Ch·∫°y seeder ƒë·ªÉ t·∫°o l·ªãch s·ª≠ nh·∫≠p h√†ng t·ª´ c√°c nh√† cung c·∫•p
     * 
     * Seeder n√†y t·∫°o ra:
     * - Nhi·ªÅu h√≥a ƒë∆°n nh·∫≠p h√†ng t·ª´ c√°c nh√† cung c·∫•p kh√°c nhau
     * - Chi ti·∫øt c√°c h√≥a ƒë∆°n v·ªõi s·∫£n ph·∫©m kh√°c nhau
     * - C·∫≠p nh·∫≠t t·ªìn kho t∆∞∆°ng ·ª©ng
     */
    public function run(): void
    {
        try {
            DB::statement('SET FOREIGN_KEY_CHECKS=0;');

            // X√≥a d·ªØ li·ªáu c≈©
            PurchaseInvoiceDetail::truncate();
            PurchaseInvoice::truncate();

            // B·∫ÆT ƒê·∫¶U TRANSACTION
            DB::transaction(function () {
                // L·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt
                $suppliers = Supplier::get();  // L·∫•y t·∫•t c·∫£ suppliers
                $branches = Branch::get();     // L·∫•y t·∫•t c·∫£ branches
                $users = User::get();          // L·∫•y t·∫•t c·∫£ users
                $products = Product::get();    // L·∫•y t·∫•t c·∫£ products

                // Ki·ªÉm tra d·ªØ li·ªáu
                if ($suppliers->count() < 1 || $branches->count() < 1 || $users->count() < 1 || $products->count() < 2) {
                    $this->command->warn('‚ö†Ô∏è Kh√¥ng ƒë·ªß d·ªØ li·ªáu m·∫´u! Vui l√≤ng ch·∫°y c√°c seeder: SupplierSeeder, BranchSeeder, UserSeeder, ProductSeeder tr∆∞·ªõc.');
                    return;
                }

                $createdCount = 0;
                $invoiceDetails = [];

                // T·∫°o d·ªØ li·ªáu h√≥a ƒë∆°n nh·∫≠p h√†ng cho m·ªói nh√† cung c·∫•p
                foreach ($suppliers as $supplierIndex => $supplier) {
                    // M·ªói nh√† cung c·∫•p c√≥ 10-20 h√≥a ƒë∆°n (nhi·ªÅu h∆°n)
                    $invoiceCount = rand(10, 20);

                    for ($i = 1; $i <= $invoiceCount; $i++) {
                        $branch = $branches->random();
                        $user = $users->random();

                        // T√≠nh to√°n ng√†y h√≥a ƒë∆°n ng·∫´u nhi√™n trong 3 th√°ng g·∫ßn ƒë√¢y
                        $invoiceDate = Carbon::now()->subDays(rand(0, 90));

                        // Ch·ªçn s·ªë s·∫£n ph·∫©m ng·∫´u nhi√™n (2-4 s·∫£n ph·∫©m m·ªói h√≥a ƒë∆°n)
                        $selectedProducts = $products->random(rand(2, min(4, $products->count())));

                        // T√≠nh to√°n subtotal t·ª´ chi ti·∫øt
                        $subtotal = 0;
                        $totalQuantity = 0;
                        $invoiceItems = [];

                        foreach ($selectedProducts as $product) {
                            $quantity = rand(10, 100);
                            // S·ª≠ d·ª•ng gi√° m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ price
                            $unitPrice = rand(10000, 100000);
                            $itemSubtotal = $quantity * $unitPrice;

                            $subtotal += $itemSubtotal;
                            $totalQuantity += $quantity;

                            $invoiceItems[] = [
                                'product_id' => $product->id,
                                'quantity' => $quantity,
                                'unit_price' => $unitPrice,
                                'subtotal' => $itemSubtotal,
                            ];
                        }

                        // √Åp d·ª•ng chi·∫øt kh·∫•u (0-15%)
                        $discountPercent = rand(0, 15);
                        $discount = ($subtotal * $discountPercent) / 100;
                        $totalAmount = $subtotal - $discount;

                        // Tr·∫£ ti·ªÅn (50-100% c·ªßa t·ªïng ti·ªÅn)
                        $paidPercent = rand(50, 100);
                        $paidAmount = ($totalAmount * $paidPercent) / 100;
                        $amountOwed = $totalAmount - $paidAmount;

                        // X√°c ƒë·ªãnh tr·∫°ng th√°i
                        $statuses = ['received', 'received', 'received', 'draft', 'cancelled'];
                        $status = $statuses[array_rand($statuses)];

                        // T·∫°o h√≥a ƒë∆°n ch√≠nh
                        $invoice = PurchaseInvoice::create([
                            'invoice_code' => 'HDN' . $supplier->code . Carbon::now()->format('YmdHis') . $i,
                            'supplier_id' => $supplier->id,
                            'branch_id' => $branch->id,
                            'user_id' => $user->id,
                            'invoice_date' => $invoiceDate,
                            'total_quantity' => $totalQuantity,
                            'total_items' => count($invoiceItems),
                            'subtotal_amount' => round($subtotal, 2),
                            'discount_amount' => round($discount, 2),
                            'total_amount' => round($totalAmount, 2),
                            'paid_amount' => round($paidAmount, 2),
                            'amount_owed' => round($amountOwed, 2),
                            'notes' => "H√≥a ƒë∆°n nh·∫≠p t·ª´ nh√† cung c·∫•p {$supplier->name}",
                            'status' => $status,
                        ]);

                        // T·∫°o chi ti·∫øt h√≥a ƒë∆°n v√† c·∫≠p nh·∫≠t t·ªìn kho
                        foreach ($invoiceItems as $detail) {
                            $invoice->details()->create([
                                'product_id' => $detail['product_id'],
                                'quantity' => $detail['quantity'],
                                'unit_price' => $detail['unit_price'],
                                'subtotal' => $detail['subtotal'],
                                'unit_of_measure' => 'c√°i',
                            ]);

                            // C·∫≠p nh·∫≠t t·ªìn kho
                            BranchProductStock::updateOrCreate(
                                [
                                    'branch_id' => $branch->id,
                                    'product_id' => $detail['product_id'],
                                ],
                                [
                                    'quantity' => DB::raw('COALESCE(quantity, 0) + ' . $detail['quantity'])
                                ]
                            );
                        }

                        $createdCount++;
                        $invoiceDetails[] = [
                            'code' => $invoice->invoice_code,
                            'supplier' => $supplier->name,
                            'date' => $invoiceDate->format('Y-m-d'),
                            'total' => $totalAmount,
                            'status' => $status,
                        ];
                    }
                }

                // Xu·∫•t ra th√¥ng tin
                $this->command->info("‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng {$createdCount} h√≥a ƒë∆°n nh·∫≠p h√†ng!");
                $this->command->info("\nüìã Chi ti·∫øt h√≥a ƒë∆°n:");
                $this->command->table(
                    ['M√£ h√≥a ƒë∆°n', 'Nh√† cung c·∫•p', 'Ng√†y', 'T·ªïng ti·ªÅn', 'Tr·∫°ng th√°i'],
                    $invoiceDetails
                );
            });
        } catch (\Throwable $e) {
            $this->command->error('‚ùå L·ªói khi ch·∫°y SupplierPurchaseHistorySeeder: ' . $e->getMessage());
            throw $e;
        } finally {
            DB::statement('SET FOREIGN_KEY_CHECKS=1;');
        }
    }
}
